#############################################################################
# CheckoutCommand
#############################################################################
RULE CheckoutCommand Start
CLASS org.eclipse.jgit.api.CheckoutCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][checkout] Start checkout branch: " + $0.name);
  traceClose("log");
ENDRULE

RULE CheckoutCommand End
CLASS org.eclipse.jgit.api.CheckoutCommand
METHOD call
AT EXIT
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][checkout] Checkouted branch successfully: " + $0.name);
  traceClose("log");
ENDRULE

RULE CheckoutCommand Error
CLASS org.eclipse.jgit.api.CheckoutCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][checkout] An error occurred while checkout: " + $0.name);
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# CloneCommand
#############################################################################
RULE CloneCommand Start
CLASS org.eclipse.jgit.api.CloneCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +"-" + "\t");
  traceln("log", "[Start][clone] Start clone repository: " + $0.uri + " -> " + $0.branch);
  traceClose("log");
ENDRULE

RULE CloneCommand End
CLASS org.eclipse.jgit.api.CloneCommand
METHOD call
AT EXIT
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +"-" + "\t");
  traceln("log", "[End][clone] Cloned repository successfully: " + $0.uri + " -> " + $0.branch);
  traceClose("log");
ENDRULE

RULE CloneCommand Error
CLASS org.eclipse.jgit.api.CloneCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +"-" + "\t");
  traceln("log", "[Error][clone] An error occurred while clone repository: " + $0.uri + " -> " + $0.branch);
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# CreateBranchCommand
#############################################################################
RULE CreateBranchCommand Start
CLASS org.eclipse.jgit.api.CreateBranchCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][branch] Start create local branch: " + $0.startPoint + " -> " + $0.name);
  traceClose("log");
ENDRULE

RULE CreateBranchCommand End
CLASS org.eclipse.jgit.api.CreateBranchCommand
METHOD call
AT EXIT
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][branch] Created local branch successfully: " + $0.startPoint + " -> " + $0.name);
  traceClose("log");
ENDRULE

RULE CreateBranchCommand Error
CLASS org.eclipse.jgit.api.CreateBranchCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][branch] An error occurred while create local branch: " + $0.startPoint + " -> " + $0.name);
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# CommitCommand
#############################################################################
RULE CommitCommand Start
CLASS org.eclipse.jgit.api.CommitCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][commit] Start commit to branch: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE CommitCommand End
CLASS org.eclipse.jgit.api.CommitCommand
METHOD call
AT EXIT
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][commit] Commited to branch successfully: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE CommitCommand Error
CLASS org.eclipse.jgit.api.CommitCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][commit] An error occurred while commit to branch: " + $0.getRepository().getBranch());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# FetchCommand
#############################################################################
RULE FetchCommand Start
CLASS org.eclipse.jgit.api.FetchCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][fetch] Start fetch from remote: " + $0.getRemote() + " -> " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE FetchCommand End
CLASS org.eclipse.jgit.api.FetchCommand
METHOD call
AT EXIT
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][fetch] Fetched from remote successfully: " + $0.getRemote() + " -> " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE FetchCommand Error
CLASS org.eclipse.jgit.api.FetchCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][fetch] An error occurred while fetch from remote: " + $0.getRemote() + " -> " + $0.getRepository().getBranch());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# PullCommand
#############################################################################
RULE PullCommand Start
CLASS org.eclipse.jgit.api.PullCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][pull] Start pull from remote: " + $0.getRemote() + " -> " + $0.getRepository().getBranch() + ":" + $0.getRemoteBranchName());
  traceClose("log");
ENDRULE

RULE PullCommand End
CLASS org.eclipse.jgit.api.PullCommand
METHOD call
AT EXIT
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][pull] Pulled from remote successfully: " + $0.getRemote() + " -> " + $0.getRepository().getBranch() + ":" + $0.getRemoteBranchName());
  traceClose("log");
ENDRULE

RULE PullCommand Error
CLASS org.eclipse.jgit.api.PullCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][pull] An error occurred while pull: " + $0.getRemote() + " -> " + $0.getRepository().getBranch() + ":" + $0.getRemoteBranchName());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# PushCommand
#############################################################################
RULE PushCommand Start
CLASS org.eclipse.jgit.api.PushCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][push] Start push to remote: " + $0.getRepository().getBranch() + " -> " + $0.getRemote());
  traceClose("log");
ENDRULE

RULE PushCommand End
CLASS org.eclipse.jgit.api.PushCommand
METHOD call
AT EXIT
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][push] Pushed to remote successfully: " + $0.getRepository().getBranch() + " -> " + $0.getRemote());
  traceClose("log");
ENDRULE

RULE PushCommand Error
CLASS org.eclipse.jgit.api.PushCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][push] An error occurred while push: " + $0.getRepository().getBranch() + " -> " + $0.getRemote());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# ResetCommand
#############################################################################
RULE ResetCommand Start
CLASS org.eclipse.jgit.api.ResetCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][reset] Start reset to remote: " + $0.getRepository().getBranch() + " / " + $0.getRefOrHEAD());
  traceClose("log");
ENDRULE

RULE ResetCommand End
CLASS org.eclipse.jgit.api.ResetCommand
METHOD call
AT EXIT
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][reset] Reset successfully: " + $0.getRepository().getBranch() + " / " + $0.getRefOrHEAD());
  traceClose("log");
ENDRULE

RULE ResetCommand Error
CLASS org.eclipse.jgit.api.ResetCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][reset] An error occurred while reset: " + $0.getRepository().getBranch() + " / " + $0.getRefOrHEAD());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# RevertCommand
#############################################################################
RULE RevertCommand Start
CLASS org.eclipse.jgit.api.RevertCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][revert] Start revert: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE RevertCommand End
CLASS org.eclipse.jgit.api.RevertCommand
METHOD call
AT EXIT
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][revert] Revert successfully: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE RevertCommand Error
CLASS org.eclipse.jgit.api.RevertCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][revert] An error occurred while revert: " + $0.getRepository().getBranch());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# StashApplyCommand
#############################################################################
RULE StashApplyCommand Start
CLASS org.eclipse.jgit.api.StashApplyCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][stash apply] Start apply stash to branch: " + $0.getStashId().getName() + " -> " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE StashApplyCommand End
CLASS org.eclipse.jgit.api.StashApplyCommand
METHOD call
AT EXIT
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][stash apply] Apply stash to branch successfully: " + $0.getStashId().getName() + " -> " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE StashApplyCommand Error
CLASS org.eclipse.jgit.api.StashApplyCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][stash apply] An error occurred while apply stash to branch: " + $0.getStashId().getName() + " -> " + $0.getRepository().getBranch());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# StashCreateCommand
#############################################################################
RULE StashCreateCommand Start
CLASS org.eclipse.jgit.api.StashCreateCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][stash create] Start creating stash: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE StashCreateCommand End
CLASS org.eclipse.jgit.api.StashCreateCommand
METHOD call
AT EXIT
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][stash create] Created stash successfully: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE StashCreateCommand Error
CLASS org.eclipse.jgit.api.StashCreateCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][stash create] An error occurred while creating stash: " + $0.getRepository().getBranch());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# CherryPickCommand
#############################################################################
RULE CherryPickCommand Start
CLASS org.eclipse.jgit.api.CherryPickCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][cherry-pick] Start cherry-pick: " + $0.ourCommitName + " -> " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE CherryPickCommand End
CLASS org.eclipse.jgit.api.CherryPickCommand
METHOD call
AT EXIT
BIND ret = $!.getStatus().toString()
IF ret.equals("Ok")
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][cherry-pick] Cherry-picked commit successfully: " + $0.ourCommitName + " -> " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE CherryPickCommand Conflicting
CLASS org.eclipse.jgit.api.CherryPickCommand
METHOD call
AT EXIT
BIND ret = $!.getStatus().toString()
IF ret.equals("Conflicting")
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][cherry-pick] Cherry-pick commit conflicted: " + $0.ourCommitName + " -> " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE CherryPickCommand Failed
CLASS org.eclipse.jgit.api.CherryPickCommand
METHOD call
AT EXIT
BIND ret = $!.getStatus().toString()
IF ret.equals("Failed")
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][cherry-pick] Cherry-pick commit failed: " + $0.ourCommitName + " -> " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE CherryPickCommand Error
CLASS org.eclipse.jgit.api.CherryPickCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][cherry-pick] An error occurred while cherry-pick: " + $0.ourCommitName + " -> " + $0.getRepository().getBranch());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# MergeCommand
#############################################################################
RULE MergeCommand Start
CLASS org.eclipse.jgit.api.MergeCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][merge] Start merge: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE MergeCommand End
CLASS org.eclipse.jgit.api.MergeCommand
METHOD call
AT EXIT
BIND ret = $!.getMergeStatus().toString()
IF ret.equals("Fast-forward")
OR
ret.equals("Fast-forward-squashed")
OR
ret.equals("Already-up-to-date")
OR
ret.equals("Merged")
OR
ret.equals("Merged-squashed")
OR
ret.equals("Merged-squashed-not-committed")
OR
ret.equals("Merged-not-committed")
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][merge] Merged successfully: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE MergeCommand Conflicting
CLASS org.eclipse.jgit.api.MergeCommand
METHOD call
AT EXIT
BIND ret = $!.getMergeStatus().toString()
IF ret.equals("Conflicting")
OR
ret.equals("Checkout Conflict")
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][merge] Merge conflicted: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE MergeCommand Failed
CLASS org.eclipse.jgit.api.MergeCommand
METHOD call
AT EXIT
BIND ret = $!.getMergeStatus().toString()
IF ret.equals("Failed")
OR
ret.equals("Aborted")
OR
ret.equals("Not-yet-supported")
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][merge] Merge failed: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE MergeCommand Error
CLASS org.eclipse.jgit.api.MergeCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][merge] An error occurred while merge: " + $0.getRepository().getBranch());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# RebaseCommand
#############################################################################
RULE RebaseCommand Start
CLASS org.eclipse.jgit.api.RebaseCommand
METHOD call
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][rebase] Start rebase: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE RebaseCommand End
CLASS org.eclipse.jgit.api.RebaseCommand
METHOD call
AT EXIT
BIND ret = $!.getStatus().toString()
IF ret.equals("OK")
OR
ret.equals("UP_TO_DATE")
OR
ret.equals("FAST_FORWARD")
OR
ret.equals("NOTHING_TO_COMMIT")
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[End][rebase] Rebased branch successfully: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE RebaseCommand Conflicting
CLASS org.eclipse.jgit.api.RebaseCommand
METHOD call
AT EXIT
BIND ret = $!.getStatus().toString()
IF ret.equals("CONFLICTS")
OR
ret.equals("STASH_APPLY_CONFLICTS")
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][rebase] Rebase branch conflicted: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE RebaseCommand Failed
CLASS org.eclipse.jgit.api.RebaseCommand
METHOD call
AT EXIT
BIND ret = $!.getStatus().toString()
IF ret.equals("ABORTED")
OR
ret.equals("STOPPED")
OR
ret.equals("EDIT")
OR
ret.equals("FAILED")
OR
ret.equals("UNCOMMITTED_CHANGES")
OR
ret.equals("INTERACTIVE_PREPARED")
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][rebase] Rebase branch failed: " + $0.getRepository().getBranch());
  traceClose("log");
ENDRULE

RULE RebaseCommand Error
CLASS org.eclipse.jgit.api.RebaseCommand
METHOD call
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" +$0.getRepository().getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Error][rebase] An error occurred while rebase: " + $0.getRepository().getBranch());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


#############################################################################
# PushTransport
#############################################################################
RULE PushTransport Start
CLASS org.eclipse.jgit.transport.Transport
METHOD open(org.eclipse.jgit.lib.Repository, org.eclipse.jgit.transport.URIish, String)
AT ENTRY
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" + + $1.getDirectory().getParentFile().getName() + "\t");
  traceln("log", "[Start][push] Start push to remote: " + $1.getBranch() + " -> " + $2.toString());
  traceClose("log");
ENDRULE

RULE PushTransport End
CLASS org.eclipse.jgit.transport.Transport
METHOD push
AT EXIT
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" + + "-" + "\t");
  traceln("log", "[End][push] Pushed to remote successfully: " + "");
  traceClose("log");
ENDRULE

RULE PushTransport Error
CLASS org.eclipse.jgit.transport.Transport
METHOD push
AT THROW
IF true
DO
  traceOpen("log","D:/tmp/byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log");
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS")) + "\t" + + "-" + "\t");
  traceln("log", "[Error][push] An error occurred while push: " + "");
  traceln("log", $^.getMessage());
  traceStack(null, "log");
  traceClose("log");
ENDRULE


