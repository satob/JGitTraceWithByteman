#############################################################################
# CheckoutCommand
#############################################################################
RULE CheckoutCommand Open
CLASS org.eclipse.jgit.api.CheckoutCommand
METHOD call
IF true
DO traceOpen("log","byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log")
ENDRULE

RULE CheckoutCommand Start
CLASS org.eclipse.jgit.api.CheckoutCommand
METHOD call
AT ENTRY
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Start][checkout] Start checkout branch: " + $0.name);
ENDRULE

RULE CheckoutCommand End
CLASS org.eclipse.jgit.api.CheckoutCommand
METHOD call
AT EXIT
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[End][checkout] Checkouted branch successfully: " + $0.name);
ENDRULE

RULE CheckoutCommand Error
CLASS org.eclipse.jgit.api.CheckoutCommand
METHOD call
AT THROW
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][checkout] An error occurred while checkout: " + $0.name);
  traceln("log", $^.getMessage());
  traceStack(null, "log");
ENDRULE

RULE CheckoutCommand Close
CLASS org.eclipse.jgit.api.CheckoutCommand
METHOD call
AT EXIT
IF true
DO traceClose("log")
ENDRULE


#############################################################################
# CloneCommand
#############################################################################
RULE CloneCommand Open
CLASS org.eclipse.jgit.api.CloneCommand
METHOD call
IF true
DO traceOpen("log","byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log")
ENDRULE

RULE CloneCommand Start
CLASS org.eclipse.jgit.api.CloneCommand
METHOD call
AT ENTRY
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Start][clone] Start clone repository: " + $0.uri + " -> " + $0.branch);
ENDRULE

RULE CloneCommand End
CLASS org.eclipse.jgit.api.CloneCommand
METHOD call
AT EXIT
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[End][clone] Cloned repository successfully: " + $0.uri + " -> " + $0.branch);
ENDRULE

RULE CloneCommand Error
CLASS org.eclipse.jgit.api.CloneCommand
METHOD call
AT THROW
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][clone] An error occurred while clone repository: " + $0.uri + " -> " + $0.branch);
  traceln("log", $^.getMessage());
  traceStack(null, "log");
ENDRULE

RULE CloneCommand Close
CLASS org.eclipse.jgit.api.CloneCommand
METHOD call
AT EXIT
IF true
DO traceClose("log")
ENDRULE


#############################################################################
# CreateBranchCommand
#############################################################################
RULE CreateBranchCommand Open
CLASS org.eclipse.jgit.api.CreateBranchCommand
METHOD call
IF true
DO traceOpen("log","byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log")
ENDRULE

RULE CreateBranchCommand Start
CLASS org.eclipse.jgit.api.CreateBranchCommand
METHOD call
AT ENTRY
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Start][branch] Start create local branch: " + $0.startPoint + " -> " + $0.name);
ENDRULE

RULE CreateBranchCommand End
CLASS org.eclipse.jgit.api.CreateBranchCommand
METHOD call
AT EXIT
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[End][branch] Created local branch successfully: " + $0.startPoint + " -> " + $0.name);
ENDRULE

RULE CreateBranchCommand Error
CLASS org.eclipse.jgit.api.CreateBranchCommand
METHOD call
AT THROW
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][branch] An error occurred while create local branch: " + $0.startPoint + " -> " + $0.name);
  traceln("log", $^.getMessage());
  traceStack(null, "log");
ENDRULE

RULE CreateBranchCommand Close
CLASS org.eclipse.jgit.api.CreateBranchCommand
METHOD call
AT EXIT
IF true
DO traceClose("log")
ENDRULE


#############################################################################
# CommitCommand
#############################################################################
RULE CommitCommand Open
CLASS org.eclipse.jgit.api.CommitCommand
METHOD call
IF true
DO traceOpen("log","byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log")
ENDRULE

RULE CommitCommand Start
CLASS org.eclipse.jgit.api.CommitCommand
METHOD call
AT ENTRY
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Start][commit] Start commit to branch: " + $0.getRepository().getBranch());
ENDRULE

RULE CommitCommand End
CLASS org.eclipse.jgit.api.CommitCommand
METHOD call
AT EXIT
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[End][commit] Commited to branch successfully: " + $0.getRepository().getBranch());
ENDRULE

RULE CommitCommand Error
CLASS org.eclipse.jgit.api.CommitCommand
METHOD call
AT THROW
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][commit] An error occurred while commit to branch: " + $0.getRepository().getBranch());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
ENDRULE

RULE CommitCommand Close
CLASS org.eclipse.jgit.api.CommitCommand
METHOD call
AT EXIT
IF true
DO traceClose("log")
ENDRULE


#############################################################################
# FetchCommand
#############################################################################
RULE FetchCommand Open
CLASS org.eclipse.jgit.api.FetchCommand
METHOD call
IF true
DO traceOpen("log","byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log")
ENDRULE

RULE FetchCommand Start
CLASS org.eclipse.jgit.api.FetchCommand
METHOD call
AT ENTRY
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Start][fetch] Start fetch from remote: " + $0.getRemote() + " -> " + $0.getRepository().getBranch());
ENDRULE

RULE FetchCommand End
CLASS org.eclipse.jgit.api.FetchCommand
METHOD call
AT EXIT
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[End][fetch] Fetched from remote successfully: " + $0.getRemote() + " -> " + $0.getRepository().getBranch());
ENDRULE

RULE FetchCommand Error
CLASS org.eclipse.jgit.api.FetchCommand
METHOD call
AT THROW
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][fetch] An error occurred while fetch from remote: " + $0.getRemote() + " -> " + $0.getRepository().getBranch());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
ENDRULE

RULE FetchCommand Close
CLASS org.eclipse.jgit.api.FetchCommand
METHOD call
AT EXIT
IF true
DO traceClose("log")
ENDRULE


#############################################################################
# PullCommand
#############################################################################
RULE PullCommand Open
CLASS org.eclipse.jgit.api.PullCommand
METHOD call
IF true
DO traceOpen("log","byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log")
ENDRULE

RULE PullCommand Start
CLASS org.eclipse.jgit.api.PullCommand
METHOD call
AT ENTRY
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Start][pull] Start pull from remote: " + $0.getRemote() + " -> " + $0.getRepository().getBranch() + ":" + $0.getRemoteBranchName());
ENDRULE

RULE PullCommand End
CLASS org.eclipse.jgit.api.PullCommand
METHOD call
AT EXIT
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[End][pull] Pulled from remote successfully: " + $0.getRemote() + " -> " + $0.getRepository().getBranch() + ":" + $0.getRemoteBranchName());
ENDRULE

RULE PullCommand Error
CLASS org.eclipse.jgit.api.PullCommand
METHOD call
AT THROW
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][pull] An error occurred while pull: " + $0.getRemote() + " -> " + $0.getRepository().getBranch() + ":" + $0.getRemoteBranchName());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
ENDRULE

RULE PullCommand Close
CLASS org.eclipse.jgit.api.PullCommand
METHOD call
AT EXIT
IF true
DO traceClose("log")
ENDRULE


#############################################################################
# PushCommand
#############################################################################
RULE PushCommand Open
CLASS org.eclipse.jgit.api.PushCommand
METHOD call
IF true
DO traceOpen("log","byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log")
ENDRULE

RULE PushCommand Start
CLASS org.eclipse.jgit.api.PushCommand
METHOD call
AT ENTRY
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Start][push] Start push to remote: " + $0.getRepository().getBranch() + " -> " + $0.getRemote());
ENDRULE

RULE PushCommand End
CLASS org.eclipse.jgit.api.PushCommand
METHOD call
AT EXIT
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[End][push] Pushed to remote successfully: " + $0.getRepository().getBranch() + " -> " + $0.getRemote());
ENDRULE

RULE PushCommand Error
CLASS org.eclipse.jgit.api.PushCommand
METHOD call
AT THROW
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][push] An error occurred while push: " + $0.getRepository().getBranch() + " -> " + $0.getRemote());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
ENDRULE

RULE PushCommand Close
CLASS org.eclipse.jgit.api.PushCommand
METHOD call
AT EXIT
IF true
DO traceClose("log")
ENDRULE


#############################################################################
# CherryPickCommand
#############################################################################
RULE CherryPickCommand Open
CLASS org.eclipse.jgit.api.CherryPickCommand
METHOD call
IF true
DO traceOpen("log","byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log")
ENDRULE

RULE CherryPickCommand Start
CLASS org.eclipse.jgit.api.CherryPickCommand
METHOD call
AT ENTRY
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Start][cherry-pick] Start cherry-pick: " + $0.ourCommitName + " -> " + $0.getRepository().getBranch());
ENDRULE

RULE CherryPickCommand End
CLASS org.eclipse.jgit.api.CherryPickCommand
METHOD call
AT EXIT
BIND ret = $!.getStatus().toString()
IF ret.equals("Ok")
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[End][cherry-pick] Cherry-picked commit successfully: " + $0.ourCommitName + " -> " + $0.getRepository().getBranch());
ENDRULE

RULE CherryPickCommand Conflicting
CLASS org.eclipse.jgit.api.CherryPickCommand
METHOD call
AT EXIT
BIND ret = $!.getStatus().toString()
IF ret.equals("Conflicting")
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][cherry-pick] Cherry-pick commit conflicted: " + $0.ourCommitName + " -> " + $0.getRepository().getBranch());
ENDRULE

RULE CherryPickCommand Failed
CLASS org.eclipse.jgit.api.CherryPickCommand
METHOD call
AT EXIT
BIND ret = $!.getStatus().toString()
IF ret.equals("Failed")
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][cherry-pick] Cherry-pick commit failed: " + $0.ourCommitName + " -> " + $0.getRepository().getBranch());
ENDRULE

RULE CherryPickCommand Error
CLASS org.eclipse.jgit.api.CherryPickCommand
METHOD call
AT THROW
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][cherry-pick] An error occurred while cherry-pick: " + $0.ourCommitName + " -> " + $0.getRepository().getBranch());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
ENDRULE

RULE CherryPickCommand Close
CLASS org.eclipse.jgit.api.CherryPickCommand
METHOD call
AT EXIT
IF true
DO traceClose("log")
ENDRULE


#############################################################################
# MergeCommand
#############################################################################
RULE MergeCommand Open
CLASS org.eclipse.jgit.api.MergeCommand
METHOD call
IF true
DO traceOpen("log","byteman_" + java.net.InetAddress.getLocalHost().getHostName() + "_" + java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE) + ".log")
ENDRULE

RULE MergeCommand Start
CLASS org.eclipse.jgit.api.MergeCommand
METHOD call
AT ENTRY
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Start][merge] Start merge: " + $0.getRepository().getBranch());
ENDRULE

RULE MergeCommand End
CLASS org.eclipse.jgit.api.MergeCommand
METHOD call
AT EXIT
BIND ret = $!.getMergeStatus().toString()
IF ret.equals("Fast-forward")
OR
ret.equals("Fast-forward-squashed")
OR
ret.equals("Already-up-to-date")
OR
ret.equals("Merged")
OR
ret.equals("Merged-squashed")
OR
ret.equals("Merged-squashed-not-committed")
OR
ret.equals("Merged-not-committed")
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[End][merge] Merged successfully: " + $0.getRepository().getBranch());
ENDRULE

RULE MergeCommand Conflicting
CLASS org.eclipse.jgit.api.MergeCommand
METHOD call
AT EXIT
BIND ret = $!.getMergeStatus().toString()
IF ret.equals("Conflicting")
OR
ret.equals("Checkout Conflict")
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][merge] Merge conflicted: " + $0.getRepository().getBranch());
ENDRULE

RULE MergeCommand Failed
CLASS org.eclipse.jgit.api.MergeCommand
METHOD call
AT EXIT
BIND ret = $!.getMergeStatus().toString()
IF ret.equals("Failed")
OR
ret.equals("Aborted")
OR
ret.equals("Not-yet-supported")
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][merge] Merge failed: " + $0.getRepository().getBranch());
ENDRULE

RULE MergeCommand Error
CLASS org.eclipse.jgit.api.MergeCommand
METHOD call
AT THROW
IF true
DO
  trace("log", java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME) + "\t");
  traceln("log", "[Error][merge] An error occurred while merge: " + $0.getRepository().getBranch());
  traceln("log", $^.getMessage());
  traceStack(null, "log");
ENDRULE

RULE MergeCommand Close
CLASS org.eclipse.jgit.api.MergeCommand
METHOD call
AT EXIT
IF true
DO traceClose("log")
ENDRULE


